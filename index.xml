<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Domain on HungerRush Handheld Documentation</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/</link><description>Recent content in Domain on HungerRush Handheld Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 07 Jun 2022 16:09:34 +0100</lastBuildDate><atom:link href="https://iiimpact.github.io/hungerrush_handheld_docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Objectives</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/quality-assurance/objectives/</link><pubDate>Tue, 11 Oct 2022 23:00:00 +0000</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/quality-assurance/objectives/</guid><description>OBJECTIVES QA will identify and report defects, ensure the product is error-free, check it conforms to client specifications, evaluate visual components and highlight UI/UX issues by adopting the mindset of the end user.
Primary QA objectives shall include but are not limited to:
Unpacking business requirements during planning sessions Creating QA related test plans and onboarding documentation Design and execute test cases Plan and create test runs Identify issues and troubleshooting Track and report defects Make suggestions to enhance the user experience Attend product related meetings Refine and optimise workflows Report to product owners and / or business stakeholders</description></item><item><title>API resources</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/systems/api-resources/</link><pubDate>Wed, 08 Jun 2022 16:05:49 +0100</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/systems/api-resources/</guid><description>General Architecture There is a Windows VM which has been deployed which acts as a resource to run the POS API. On this VM we are able to start the POS test server
which the client uses to send and receive data from.
HungerRush Handheld Infrastructure This repository represents the IaC for the HungerRush Handheld project and is built and maintained in Terraform. You can also login into Azure portal using the iciuser@devrevention.</description></item><item><title>CI CD Process</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/systems/ci-cd-process/</link><pubDate>Wed, 08 Jun 2022 16:05:49 +0100</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/systems/ci-cd-process/</guid><description>Continuous Integration &amp;amp; Continuous Delivery Continuous Integration and automated testing is done through a combination of writing unit tests, code style analysis &amp;amp; ui tests for the development language used for the project and Azure Devops.
Azure workflow steps are created on Azure Devops and the yaml config file is maintained on there Developers write unit tests Code changes are committed to GitHub Developers create a pull request on GitHub The following Azure pipelines are triggered for changes on the development branch Code Style which runs a Sonar linting code analysis (required workflow) the Sonar linting account to view the linting reports for this project can be accessed using the iciuser@devrevention.</description></item><item><title>POS Setup</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/systems/pos/</link><pubDate>Wed, 08 Jun 2022 16:05:49 +0100</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/systems/pos/</guid><description>HARDWARE Prerequisites Make sure you have the right POS device. Hera51 If POS device isn&amp;rsquo;t available, an Android phone is fine for testing. Operating System Ensure the device runs Android Nougat (version 7.1.0 or higher)
Platform Repositories Hungerrush-handheld-order-and-pay This represents the POS app. Weâ€™ve followed a an MMVM approach in the implementation of this app.
Setup git clone git@github.com:IIIMPACT/hungerrush-handheld-order-and-pay.git Documentation Setup The documentation is built using GitHub pages, Hugo and the Hugo-Learn template.</description></item><item><title>Payments</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/domain/payments/</link><pubDate>Wed, 08 Jun 2022 14:34:06 +0100</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/domain/payments/</guid><description>Payments refers to a secondary bounded context involving payment mechanisms. Currently, these are common to both customers and consumers. This will likely be refined when this work is planned out further.
Docket The term &amp;ldquo;Docket&amp;rdquo; refers to all information relating to an open table or a consumer order, that is relevant to the consumer themselves. A docket does not include information that is only relevant to the kitchen,
A docket typically includes information such as:</description></item><item><title>Architecture Design</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/adrs/architecturedesign/</link><pubDate>Wed, 01 Sep 2021 17:05:10 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/adrs/architecturedesign/</guid><description>Status proposed Context We need to layout and document the layout of our codebase. Miro Decision Documenting the layout of our codebase. Documenting Models, Views &amp;amp; View Models as well as functionality and responsibilities.</description></item><item><title>Code Styles</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/adrs/code-styles/</link><pubDate>Wed, 01 Sep 2021 17:05:10 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/adrs/code-styles/</guid><description>Status proposed Context We need a structed set of rules to define how we go about code styling/formating Decision Using Sonar Cloud in our CI &amp;amp; Local Linting process to enforce code styles in the HandHeld Codebase Using ReSharper/Rider for local linting and formating Consequences Formatting and linting will be enforced in the CI process using Sonar linting for detecting coding issues in real-time and get clear guidance on how to fix them.</description></item><item><title>Naming Convention Guidelines</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/guides/naming-guideline/</link><pubDate>Tue, 31 Aug 2021 18:11:15 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/guides/naming-guideline/</guid><description>Naming Guidelines Avoid Noise Words Noise words are the words that do not offer any additional information about the variable. They are redundant and should be removed.
Some popular noise words are:
The (prefix)
Info
Data
Variable
Object
Manager
If your class is named UserInfo, you can just remove the Info and make it User. Using BookData instead of Book as class name is just a no-brainer, as a class stores Data anyways.</description></item><item><title>Development Processes</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/development-flow/</link><pubDate>Tue, 31 Aug 2021 18:10:57 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/development-flow/</guid><description>Git We follow a gitflow like strategy. All changes are made in branches based off of master Branches are merged into master via PR Frontend applications are deployed to individual sandbox environments for each pull request. Frontend applications are automatically deployed to staging when merging to main Backend applications are deployed to a dedicated staging environment when being merged to master Backend applications are deployed to production when invoking the release workflow We use strict semantic versioning on all packages.</description></item><item><title>Testing Methodology</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/quality-assurance/testing-methodology/</link><pubDate>Tue, 11 Oct 2022 23:00:00 +0000</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/quality-assurance/testing-methodology/</guid><description>TESTING METHODOLOGY A mixture of automation and manual testing will be conducted ensuring products conform to business requirements, designs and behave as expected.
Unit Testing
We are using NUnit for Unit Testing.
First level of testing to be scripted and conducted by developers Ensure individual units of code work as intended / designed at code level Integration Testing
Ensure individual components work as intended Framed by user scenario stories Automated tests by developers / manually tested by QA End-to-End Testing</description></item><item><title>Test Server Setup</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/systems/server/</link><pubDate>Wed, 08 Jun 2022 16:05:59 +0100</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/systems/server/</guid><description>HungerRush Server (SandBox environment) Prerequisites On a windows server machine, make sure you have these installed. Microsoft SQL Server 2019 or higher Microsoft SQL Server Management Studio Visual Studio .NET Framework 4.5 Database files iiimpact users can access this link Powershell or Windows Terminal. On a Mac computer, make use of Parallels virtual machine and install the above. Key Repos Make request to HungerRush to provide access to these repos on Azure Devops.</description></item><item><title>Identity</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/domain/identity/</link><pubDate>Wed, 08 Jun 2022 14:36:57 +0100</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/domain/identity/</guid><description>The bounded context of Identity is the source of truth for user authentication and properties.
Customer The term &amp;ldquo;Customer&amp;rdquo; refers to a restaurant owner.
Consumer The term &amp;ldquo;Consumer&amp;rdquo; refers to a person who is purchasing food.</description></item><item><title>Code Patterns</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/adrs/code-principles/</link><pubDate>Wed, 01 Sep 2021 17:05:10 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/adrs/code-principles/</guid><description>Status (proposed) Context We need a structured set of rules to define how we go about code patterns, such as how we handle exceptions, logging, etc. We need to define a set of patterns that we can use to ensure consistency across the codebase Decision Using MVVM as our base pattern for all UI code Using SOLID/DRY/KISS/YAGANI Design Principles as our base patterns Consequences Code will be more readable and structured.</description></item><item><title>Clean Code Guide</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/guides/clean-code-guidelines/</link><pubDate>Tue, 31 Aug 2021 18:11:15 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/guides/clean-code-guidelines/</guid><description/></item><item><title>Definition of Ready/Done</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/definition-of-ready-done/</link><pubDate>Tue, 31 Aug 2021 18:11:15 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/definition-of-ready-done/</guid><description>At each stage of a task or story&amp;rsquo;s progression we have a set of criteria that must be met before the task or story can be moved to the next stage. This is known as the Definition of Ready (DoR) and Definition of Done (DoD).
Selected for development (DoR) We have designs We have assets Are there integration points available Do we have API keys Do we have API documentation Are the requirements clear Do we have Acceptance Criteria Development (DoD) PR is open and well detailed It satisfies all the Acceptance Criteria (AC) It passes all the checks (tests, coverage, linting, etc.</description></item><item><title>Testing Phases</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/quality-assurance/testing-phases/</link><pubDate>Tue, 11 Oct 2022 23:00:00 +0000</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/quality-assurance/testing-phases/</guid><description>TESTING PHASES Analysis QA (and stakeholders) analyse past, present and future user stories Identify testable requirements Extract Acceptance Criteria and compare against project Roadmap Create tests to cover all positive / negative scenarios and edge cases Strategy NEW FEATURE TESTING
Occurs once all the tasks of a story are completed by developers When QA team has capacity to validate the ticket Tested on multiple devices, operating systems and browsers (where possible / necessary) REGRESSION TESTING</description></item><item><title>File structure Guide</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/file-structure-guide/</link><pubDate>Tue, 31 Aug 2021 18:11:15 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/file-structure-guide/</guid><description>File Structure To easily edit this table use the following link tablesgenerator and copy the markdown table into the editor.
Type Description Location Example View User Interface Views/&amp;lt;Context&amp;gt;/&amp;lt;Name&amp;gt; Views/Auth/LoginView.xaml Model Business Objects that encapsulate data and behavior of application domain Models/&amp;lt;Context&amp;gt;/&amp;lt;Name&amp;gt; Models/Employee/EmployeeMail.cs Data Access Model Data transfer object for passing on values, ends in Obj Models/&amp;lt;Context&amp;gt;/&amp;lt;Name&amp;gt; Models/Employee/EmployeeObj.cs ViewModel Link between Model and View OR It Retrieves data from Model and exposes it to the View ViewModels/&amp;lt;Context&amp;gt;/&amp;lt;Name&amp;gt; ViewModels/Auth/LoginViewModel.</description></item><item><title>Refactoring Guide</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/guides/refactoring-guide/</link><pubDate>Tue, 31 Aug 2021 18:11:15 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/guides/refactoring-guide/</guid><description/></item><item><title>Pre-Git Commit linting</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/guides/pre-git-commit-linting/</link><pubDate>Tue, 08 Nov 2022 20:19:49 +0100</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/guides/pre-git-commit-linting/</guid><description>Introduction This setup uses husky and lint-staged to clean C# and XML-based codes.
Setup for new members navigate to root directory where we have the .SLN file and .git folder
run npm install
Fresh setup Pre-requisites 1. Install node on your computer -&amp;gt;, and make sure itâ€™s available in your terminal by running node -v
2. Install dotnet cli -&amp;gt; and make sure itâ€™s available by running dotnet -v
3. Then, install dotnet format -&amp;gt; : dotnet tool install -g dotnet-format which helps format C# code in dotnet projects</description></item><item><title>Test Case Development</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/quality-assurance/test-case-development/</link><pubDate>Tue, 11 Oct 2022 23:00:00 +0000</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/quality-assurance/test-case-development/</guid><description>TEST CASE DEVELOPMENT QA will create test scenarios that can be run against different user types, products / services, environments, devices etc.
Test cases should provide sufficient detail to cover acceptance criteria and include the following for each scenario:
TITLE relating to the story, sub-task or action LINKED to a correlating story or sub-task PRIORITISED correctly with P0-P3 rating EVIDENCED correctly with ticket comment, visual aids etcâ€¦ ESTIMATED run time added after execution LABELLED correctly REVIEW</description></item><item><title>Defect handling</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/quality-assurance/defect-handling/</link><pubDate>Tue, 11 Oct 2022 23:00:00 +0000</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/quality-assurance/defect-handling/</guid><description>DEFECT HANDLING When an issue is observed the QA team should:
Make sure the issue is reproducible Get another team member to verify Raise necessary bug ticket and share with the team Bug prioritisation should follow the below rating system, which takes into account how severely the bug impacts the system and how urgently it should be fixed / eradicated from the site. If necessary QA should consult a developer or PO to make sure the correct priority is given.</description></item><item><title>Testing</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/test-coverage/</link><pubDate>Tue, 31 Aug 2021 18:11:32 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/processes/test-coverage/</guid><description>At IIIMPACT, we require that all work has a unit test coverage of at least 70%. This is a minimum however, all code should be covered to a level which considers all critical and functional components.
Your project should stipulate the test tech stack and the minimum coverage required.</description></item><item><title>Technical Incidents</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/incidents/technical-incidents/</link><pubDate>Thu, 29 Sep 2022 12:30:51 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/incidents/technical-incidents/</guid><description>Technical Incidents Priority Codes These are largely defined from this resource, but adapted for our use-case:
P0: The product is unavailable or there is a breach of confidential information; the task has the highest priority P1: A task blocking other stakeholders or customers P2: A task affects customers, but there is a non-technical workaround P3: A task that does not affect customers Note: incidents can be upgraded or downgraded as more information becomes available.</description></item><item><title>Technical Incident Report Template</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/incidents/technical-incident-report-template/</link><pubDate>Thu, 29 Sep 2022 12:31:51 +0200</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/engineering/incidents/technical-incident-report-template/</guid><description>IIIMPACT Technical Incident Report Account: The name of the client account affected
Severity: A value of p0,p1,p2,p3 depending on the severity of the incident
Reported At: An ISO 8601 sortable format, eg: 2021-07-12T10:00:32 SAST
Resolved At: An ISO 8601 sortable format, eg: 2021-07-12T10:00:32 SAST
Reported By: The name of the individual who reported the incident
Triaging Engineers: The name of the engineers who handled the incident
Summary A high level summary of the incident.</description></item><item><title>Hungerrush</title><link>https://iiimpact.github.io/hungerrush_handheld_docs/language-reference/hungerrush/</link><pubDate>Wed, 08 Jun 2022 15:56:18 +0100</pubDate><guid>https://iiimpact.github.io/hungerrush_handheld_docs/language-reference/hungerrush/</guid><description>This document describes terms used internally at HungerRush which do not necessarily match terminology that we use. This is because we have tried to use language which makes sense in the context of each domain, or matches industry standard language.
Site The term &amp;ldquo;Site&amp;rdquo; refers to a single restaurant chain managed by a Customer. As a Customer, I can manage multiple restaurant chains under a single account.
A site is analogous to a merchant.</description></item></channel></rss>